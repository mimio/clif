{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CLEAR_SELECTION, HOVER_FEATURE, SET_MAP_LOADED, SELECT_FEATURE, UNHOVER_FEATURE, SET_POPUP_ID, RESET_MAP } from './types';\nimport { config } from './config';\nconst initialState = {\n  config,\n  selectedFeatureId: null,\n  hoveredFeatureId: null,\n  mapLoaded: false,\n  popupId: null\n};\nexport function mapReducer(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SELECT_FEATURE:\n      return _objectSpread({}, state, {\n        selectedFeatureId: payload\n      });\n\n    case SET_POPUP_ID:\n      return _objectSpread({}, state, {\n        popupId: payload\n      });\n\n    case CLEAR_SELECTION:\n      return _objectSpread({}, state, {\n        selectedFeatureId: initialState.selectedFeatureId\n      });\n\n    case HOVER_FEATURE:\n      return _objectSpread({}, state, {\n        hoveredFeatureId: payload\n      });\n\n    case UNHOVER_FEATURE:\n      return _objectSpread({}, state, {\n        hoveredFeatureId: initialState.hoveredFeatureId\n      });\n\n    case SET_MAP_LOADED:\n      return _objectSpread({}, state, {\n        mapLoaded: payload\n      });\n\n    case RESET_MAP:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/cliftoncampbell/Development/clif.world/modules/map/reducer.js"],"names":["CLEAR_SELECTION","HOVER_FEATURE","SET_MAP_LOADED","SELECT_FEATURE","UNHOVER_FEATURE","SET_POPUP_ID","RESET_MAP","config","initialState","selectedFeatureId","hoveredFeatureId","mapLoaded","popupId","mapReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SACEA,eADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,eALF,EAMEC,YANF,EAOEC,SAPF,QAQO,SARP;AASA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBD,EAAAA,MADmB;AAEnBE,EAAAA,iBAAiB,EAAE,IAFA;AAGnBC,EAAAA,gBAAgB,EAAE,IAHC;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAQA,OAAO,SAASC,UAAT,CAAoBC,KAAK,GAAGN,YAA5B,EAA0CO,MAA1C,EAAkD;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKb,cAAL;AACE,+BACKW,KADL;AAEEL,QAAAA,iBAAiB,EAAEQ;AAFrB;;AAIF,SAAKZ,YAAL;AACE,+BACKS,KADL;AAEEF,QAAAA,OAAO,EAAEK;AAFX;;AAIF,SAAKjB,eAAL;AACE,+BACKc,KADL;AAEEL,QAAAA,iBAAiB,EAAED,YAAY,CAACC;AAFlC;;AAIF,SAAKR,aAAL;AACE,+BACKa,KADL;AAEEJ,QAAAA,gBAAgB,EAAEO;AAFpB;;AAIF,SAAKb,eAAL;AACE,+BACKU,KADL;AAEEJ,QAAAA,gBAAgB,EAAEF,YAAY,CAACE;AAFjC;;AAIF,SAAKR,cAAL;AACE,+BACKY,KADL;AAEEH,QAAAA,SAAS,EAAEM;AAFb;;AAIF,SAAKX,SAAL;AACE,aAAOE,YAAP;;AACF;AACE,aAAOM,KAAP;AAlCJ;AAoCD","sourcesContent":["import {\n  CLEAR_SELECTION,\n  HOVER_FEATURE,\n  SET_MAP_LOADED,\n  SELECT_FEATURE,\n  UNHOVER_FEATURE,\n  SET_POPUP_ID,\n  RESET_MAP,\n} from './types';\nimport { config } from './config';\n\nconst initialState = {\n  config,\n  selectedFeatureId: null,\n  hoveredFeatureId: null,\n  mapLoaded: false,\n  popupId: null,\n};\n\nexport function mapReducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case SELECT_FEATURE:\n      return {\n        ...state,\n        selectedFeatureId: payload,\n      };\n    case SET_POPUP_ID:\n      return {\n        ...state,\n        popupId: payload,\n      };\n    case CLEAR_SELECTION:\n      return {\n        ...state,\n        selectedFeatureId: initialState.selectedFeatureId,\n      };\n    case HOVER_FEATURE:\n      return {\n        ...state,\n        hoveredFeatureId: payload,\n      };\n    case UNHOVER_FEATURE:\n      return {\n        ...state,\n        hoveredFeatureId: initialState.hoveredFeatureId,\n      };\n    case SET_MAP_LOADED:\n      return {\n        ...state,\n        mapLoaded: payload,\n      };\n    case RESET_MAP:\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}