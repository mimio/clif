{"ast":null,"code":"import _styled from \"@emotion/styled-base\";\nvar _jsxFileName = \"/Users/cliftoncampbell/Development/clif.world/components/GlitchImage/GlitchImage.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport glsl from 'glslify';\nimport * as THREE from 'three';\nimport vertex from './glsl/vertex.glsl';\nimport fragment from './glsl/fragment.glsl';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst vertexShader = glsl(vertex);\nconst fragmentShader = glsl(fragment);\n\nconst Container = _styled(\"div\", {\n  target: \"e1yvo4p60\",\n  label: \"Container\"\n})(false ? {\n  name: \"zzq8fp\",\n  styles: \"position:relative;width:100%;canvas{position:absolute;top:0;left:0;background:transparent;}\"\n} : {\n  name: \"zzq8fp\",\n  styles: \"position:relative;width:100%;canvas{position:absolute;top:0;left:0;background:transparent;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jbGlmdG9uY2FtcGJlbGwvRGV2ZWxvcG1lbnQvY2xpZi53b3JsZC9jb21wb25lbnRzL0dsaXRjaEltYWdlL0dsaXRjaEltYWdlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXNEIiLCJmaWxlIjoiL1VzZXJzL2NsaWZ0b25jYW1wYmVsbC9EZXZlbG9wbWVudC9jbGlmLndvcmxkL2NvbXBvbmVudHMvR2xpdGNoSW1hZ2UvR2xpdGNoSW1hZ2UuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgZ2xzbCBmcm9tICdnbHNsaWZ5JztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB2ZXJ0ZXggZnJvbSAnLi9nbHNsL3ZlcnRleC5nbHNsJztcbmltcG9ydCBmcmFnbWVudCBmcm9tICcuL2dsc2wvZnJhZ21lbnQuZ2xzbCc7XG5cbmNvbnN0IHZlcnRleFNoYWRlciA9IGdsc2wodmVydGV4KTtcbmNvbnN0IGZyYWdtZW50U2hhZGVyID0gZ2xzbChmcmFnbWVudCk7XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGNhbnZhcyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICB9XG5gO1xuXG5jbGFzcyBHbGl0Y2hJbWFnZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnRhaW5lclJlZiA9IG51bGw7XG5cbiAgd2lkdGggPSBudWxsO1xuXG4gIGhlaWdodCA9IG51bGw7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zZXRTaXplKCk7XG4gICAgdGhpcy5pbml0KCk7XG4gICAgdGhpcy5jcmVhdGVNZXNoKCk7XG4gICAgdGhpcy5hZGRFdmVudHMoKTtcbiAgICB0aGlzLnJlbmRlclNjZW5lKCk7XG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuICB9XG5cbiAgaW5pdCA9ICgpID0+IHtcbiAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICA0NSxcbiAgICAgIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodCxcbiAgICAgIDAuMSxcbiAgICAgIDEwMCxcbiAgICApO1xuXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDE7XG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgIGFscGhhOiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4MTYxNjE2LCAwKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgIHRoaXMuY29udGFpbmVyUmVmLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICB0aGlzLmNsb2NrID0gbmV3IFRIUkVFLkNsb2NrKCk7XG4gIH07XG5cbiAgc2V0U2l6ZSA9ICgpID0+IHtcbiAgICB0aGlzLndpZHRoID0gdGhpcy5jb250YWluZXJSZWYuY2xpZW50V2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLndpZHRoICogKDUgLyAxMik7XG4gICAgdGhpcy5jb250YWluZXJSZWYuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5oZWlnaHR9cHhgO1xuICB9O1xuXG4gIG9uUmVzaXplID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U2l6ZSgpO1xuXG4gICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgdGhpcy5tZXNoLnNjYWxlLnNldChcbiAgICAgIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodCAtICh0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQpICogMC4yLFxuICAgICAgMC44LFxuICAgICAgMSxcbiAgICApO1xuICB9O1xuXG4gIGFkZEV2ZW50cyA9ICgpID0+IHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5ydW4pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLCBmYWxzZSk7XG4gIH07XG5cbiAgY3JlYXRlTWVzaCA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBzcmMgfSA9IHRoaXMucHJvcHM7XG4gICAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMSwgMSwgMTYsIDE2KTtcbiAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQoc3JjKTtcbiAgICAgIHRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xuICAgICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XG4gICAgICAgIHZlcnRleFNoYWRlcixcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIsXG4gICAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgICAgdVRpbWU6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgIHVUZXh0dXJlOiB7XG4gICAgICAgICAgICB2YWx1ZTogdGV4dHVyZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKTtcblxuICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5tZXNoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhbGVydChlKTtcbiAgICB9XG4gIH07XG5cbiAgcnVuID0gKCkgPT4ge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJ1bik7XG4gICAgdGhpcy5yZW5kZXJTY2VuZSgpO1xuICB9O1xuXG4gIHJlbmRlclNjZW5lID0gKCkgPT4ge1xuICAgIHRoaXMubWF0ZXJpYWwudW5pZm9ybXMudVRpbWUudmFsdWUgPSB0aGlzLmNsb2NrLmdldEVsYXBzZWRUaW1lKCk7XG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGdhIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8Q29udGFpbmVyXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZ3JpZEFyZWE6IGdhLFxuICAgICAgICB9fVxuICAgICAgICByZWY9eyhyZWYpID0+IHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lclJlZiA9IHJlZjtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5HbGl0Y2hJbWFnZS5wcm9wVHlwZXMgPSB7XG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBnYTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbkdsaXRjaEltYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgZ2E6ICcnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgR2xpdGNoSW1hZ2U7XG4iXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nclass GlitchImage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"containerRef\", null);\n\n    _defineProperty(this, \"width\", null);\n\n    _defineProperty(this, \"height\", null);\n\n    _defineProperty(this, \"init\", () => {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.1, 100);\n      this.camera.position.z = 1;\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setSize(this.width, this.height);\n      this.renderer.setClearColor(0x161616, 0);\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.containerRef.appendChild(this.renderer.domElement);\n      this.clock = new THREE.Clock();\n    });\n\n    _defineProperty(this, \"setSize\", () => {\n      this.width = this.containerRef.clientWidth;\n      this.height = this.width * (5 / 12);\n      this.containerRef.style.height = `${this.height}px`;\n    });\n\n    _defineProperty(this, \"onResize\", () => {\n      this.setSize();\n      this.camera.aspect = this.width / this.height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(this.width, this.height);\n      this.mesh.scale.set(this.width / this.height - this.width / this.height * 0.2, 0.8, 1);\n    });\n\n    _defineProperty(this, \"addEvents\", () => {\n      requestAnimationFrame(this.run);\n      window.addEventListener('resize', this.onResize, false);\n    });\n\n    _defineProperty(this, \"createMesh\", () => {\n      try {\n        const {\n          src\n        } = this.props;\n        this.geometry = new THREE.PlaneGeometry(1, 1, 16, 16);\n        const texture = new THREE.TextureLoader().load(src);\n        texture.minFilter = THREE.LinearFilter;\n        this.material = new THREE.ShaderMaterial({\n          vertexShader,\n          fragmentShader,\n          uniforms: {\n            uTime: {\n              value: 0.0\n            },\n            uTexture: {\n              value: texture\n            }\n          }\n        });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.scene.add(this.mesh);\n      } catch (e) {\n        alert(e);\n      }\n    });\n\n    _defineProperty(this, \"run\", () => {\n      requestAnimationFrame(this.run);\n      this.renderScene();\n    });\n\n    _defineProperty(this, \"renderScene\", () => {\n      this.material.uniforms.uTime.value = this.clock.getElapsedTime();\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.setSize();\n    this.init();\n    this.createMesh();\n    this.addEvents();\n    this.renderScene();\n    this.onResize();\n  }\n\n  render() {\n    const {\n      ga\n    } = this.props;\n    return ___EmotionJSX(Container, {\n      style: {\n        gridArea: ga\n      },\n      ref: ref => {\n        this.containerRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nGlitchImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  ga: PropTypes.string\n};\nGlitchImage.defaultProps = {\n  ga: ''\n};\nexport default GlitchImage;","map":{"version":3,"sources":["/Users/cliftoncampbell/Development/clif.world/components/GlitchImage/GlitchImage.jsx"],"names":["React","Component","PropTypes","glsl","THREE","vertex","fragment","vertexShader","fragmentShader","Container","GlitchImage","scene","Scene","camera","PerspectiveCamera","width","height","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","containerRef","appendChild","domElement","clock","Clock","clientWidth","style","aspect","updateProjectionMatrix","mesh","scale","set","requestAnimationFrame","run","addEventListener","onResize","src","props","geometry","PlaneGeometry","texture","TextureLoader","load","minFilter","LinearFilter","material","ShaderMaterial","uniforms","uTime","value","uTexture","Mesh","add","e","alert","renderScene","getElapsedTime","render","componentDidMount","init","createMesh","addEvents","ga","gridArea","ref","propTypes","string","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport glsl from 'glslify';\nimport * as THREE from 'three';\nimport vertex from './glsl/vertex.glsl';\nimport fragment from './glsl/fragment.glsl';\n\nconst vertexShader = glsl(vertex);\nconst fragmentShader = glsl(fragment);\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background: transparent;\n  }\n`;\n\nclass GlitchImage extends Component {\n  containerRef = null;\n\n  width = null;\n\n  height = null;\n\n  componentDidMount() {\n    this.setSize();\n    this.init();\n    this.createMesh();\n    this.addEvents();\n    this.renderScene();\n    this.onResize();\n  }\n\n  init = () => {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      this.width / this.height,\n      0.1,\n      100,\n    );\n\n    this.camera.position.z = 1;\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n    });\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0x161616, 0);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.containerRef.appendChild(this.renderer.domElement);\n\n    this.clock = new THREE.Clock();\n  };\n\n  setSize = () => {\n    this.width = this.containerRef.clientWidth;\n    this.height = this.width * (5 / 12);\n    this.containerRef.style.height = `${this.height}px`;\n  };\n\n  onResize = () => {\n    this.setSize();\n\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(this.width, this.height);\n    this.mesh.scale.set(\n      this.width / this.height - (this.width / this.height) * 0.2,\n      0.8,\n      1,\n    );\n  };\n\n  addEvents = () => {\n    requestAnimationFrame(this.run);\n    window.addEventListener('resize', this.onResize, false);\n  };\n\n  createMesh = () => {\n    try {\n      const { src } = this.props;\n      this.geometry = new THREE.PlaneGeometry(1, 1, 16, 16);\n      const texture = new THREE.TextureLoader().load(src);\n      texture.minFilter = THREE.LinearFilter;\n      this.material = new THREE.ShaderMaterial({\n        vertexShader,\n        fragmentShader,\n        uniforms: {\n          uTime: { value: 0.0 },\n          uTexture: {\n            value: texture,\n          },\n        },\n      });\n      this.mesh = new THREE.Mesh(this.geometry, this.material);\n\n      this.scene.add(this.mesh);\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  run = () => {\n    requestAnimationFrame(this.run);\n    this.renderScene();\n  };\n\n  renderScene = () => {\n    this.material.uniforms.uTime.value = this.clock.getElapsedTime();\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    const { ga } = this.props;\n    return (\n      <Container\n        style={{\n          gridArea: ga,\n        }}\n        ref={(ref) => {\n          this.containerRef = ref;\n        }}\n      />\n    );\n  }\n}\n\nGlitchImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  ga: PropTypes.string,\n};\n\nGlitchImage.defaultProps = {\n  ga: '',\n};\n\nexport default GlitchImage;\n"]},"metadata":{},"sourceType":"module"}