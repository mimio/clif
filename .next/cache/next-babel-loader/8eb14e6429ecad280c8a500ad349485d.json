{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport bbox from '@turf/bbox';\nimport { lineString } from '@turf/helpers';\nimport get from 'lodash.get';\nimport { createSelector } from 'reselect';\nimport { arrayToFeatureCollection } from 'utils/geojson';\nexport var selectState = function selectState(state) {\n  return state.geojson;\n};\nexport var selectData = createSelector(selectState, function (state) {\n  return get(state, 'data', []);\n});\nexport var selectFeatureList = createSelector(selectData, function (data) {\n  return Object.values(data);\n});\nexport var selectLookup = createSelector(selectData, function (data) {\n  return data.reduce(function (acc, ft) {\n    return _objectSpread({}, acc, _defineProperty({}, ft.id, ft));\n  }, {});\n});\nexport var selectGeoJson = createSelector(selectFeatureList, function (features) {\n  return arrayToFeatureCollection(features);\n});\nexport var selectGeoJsonWithoutOutliers = createSelector(selectFeatureList, function (features) {\n  return arrayToFeatureCollection(features.filter(function (_ref) {\n    var outlier = _ref.outlier;\n    return !outlier;\n  }));\n});\nexport var selectAreFeaturesEmpty = createSelector(selectFeatureList, function (list) {\n  return list.length === 0;\n});\nexport var selectIsInitialized = createSelector(selectState, function (state) {\n  return state.updateCount > 0;\n});\nexport var selectChronologicalFeatures = createSelector(selectFeatureList, function (features) {\n  return features.sort(function (a, b) {\n    return a.date.end > b.date.end;\n  });\n});\nexport var selectChronologicalFeatureIds = createSelector(selectChronologicalFeatures, function (features) {\n  return features.map(function (_ref2) {\n    var id = _ref2.id;\n    return id;\n  });\n});\nexport var selectWorkPathGeoJson = createSelector(selectChronologicalFeatures, function (features) {\n  var orderedCoords = features.map(function (_ref3) {\n    var coordinates = _ref3.coordinates;\n    return coordinates;\n  });\n  return lineString(orderedCoords);\n});\nexport var selectGeoJsonBounds = createSelector(selectGeoJsonWithoutOutliers, selectAreFeaturesEmpty, function (geojson, isEmpty) {\n  if (isEmpty) return null;\n  return bbox(geojson);\n});","map":{"version":3,"sources":["/Users/cliftoncampbell/Development/clif.world/modules/geojson/selectors.js"],"names":["bbox","lineString","get","createSelector","arrayToFeatureCollection","selectState","state","geojson","selectData","selectFeatureList","data","Object","values","selectLookup","reduce","acc","ft","id","selectGeoJson","features","selectGeoJsonWithoutOutliers","filter","outlier","selectAreFeaturesEmpty","list","length","selectIsInitialized","updateCount","selectChronologicalFeatures","sort","a","b","date","end","selectChronologicalFeatureIds","map","selectWorkPathGeoJson","orderedCoords","coordinates","selectGeoJsonBounds","isEmpty"],"mappings":"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","sourcesContent":["import bbox from '@turf/bbox';\nimport { lineString } from '@turf/helpers';\nimport get from 'lodash.get';\nimport { createSelector } from 'reselect';\nimport { arrayToFeatureCollection } from 'utils/geojson';\n\nexport const selectState = (state) => state.geojson;\n\nexport const selectData = createSelector(selectState, (state) =>\n  get(state, 'data', []),\n);\n\nexport const selectFeatureList = createSelector(selectData, (data) =>\n  Object.values(data),\n);\n\nexport const selectLookup = createSelector(selectData, (data) =>\n  data.reduce((acc, ft) => ({ ...acc, [ft.id]: ft }), {}),\n);\n\nexport const selectGeoJson = createSelector(\n  selectFeatureList,\n  (features) => arrayToFeatureCollection(features),\n);\n\nexport const selectGeoJsonWithoutOutliers = createSelector(\n  selectFeatureList,\n  (features) =>\n    arrayToFeatureCollection(\n      features.filter(({ outlier }) => !outlier),\n    ),\n);\n\nexport const selectAreFeaturesEmpty = createSelector(\n  selectFeatureList,\n  (list) => list.length === 0,\n);\n\nexport const selectIsInitialized = createSelector(\n  selectState,\n  (state) => state.updateCount > 0,\n);\n\nexport const selectChronologicalFeatures = createSelector(\n  selectFeatureList,\n  (features) => features.sort((a, b) => a.date.end > b.date.end),\n);\n\nexport const selectChronologicalFeatureIds = createSelector(\n  selectChronologicalFeatures,\n  (features) => features.map(({ id }) => id),\n);\n\nexport const selectWorkPathGeoJson = createSelector(\n  selectChronologicalFeatures,\n  (features) => {\n    const orderedCoords = features.map(\n      ({ coordinates }) => coordinates,\n    );\n    return lineString(orderedCoords);\n  },\n);\n\nexport const selectGeoJsonBounds = createSelector(\n  selectGeoJsonWithoutOutliers,\n  selectAreFeaturesEmpty,\n  (geojson, isEmpty) => {\n    if (isEmpty) return null;\n    return bbox(geojson);\n  },\n);\n"]},"metadata":{},"sourceType":"module"}