{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport bbox from '@turf/bbox';\nimport { lineString } from '@turf/helpers';\nimport get from 'lodash.get';\nimport { createSelector } from 'reselect';\nimport { arrayToFeatureCollection } from 'utils/geojson';\nexport const selectState = state => state.geojson;\nexport const selectData = createSelector(selectState, state => get(state, 'data', []));\nexport const selectFeatureList = createSelector(selectData, data => Object.values(data));\nexport const selectLookup = createSelector(selectData, data => data.reduce((acc, ft) => _objectSpread({}, acc, {\n  [ft.id]: ft\n}), {}));\nexport const selectGeoJson = createSelector(selectFeatureList, features => arrayToFeatureCollection(features));\nexport const selectGeoJsonWithoutOutliers = createSelector(selectFeatureList, features => arrayToFeatureCollection(features.filter(({\n  outlier\n}) => !outlier)));\nexport const selectAreFeaturesEmpty = createSelector(selectFeatureList, list => list.length === 0);\nexport const selectIsInitialized = createSelector(selectState, state => state.updateCount > 0);\nexport const selectChronologicalFeatures = createSelector(selectFeatureList, features => features.sort((a, b) => a.date.end > b.date.end));\nexport const selectChronologicalFeatureIds = createSelector(selectChronologicalFeatures, features => features.map(({\n  id\n}) => id));\nexport const selectWorkPathGeoJson = createSelector(selectChronologicalFeatures, features => {\n  const orderedCoords = features.map(({\n    coordinates\n  }) => coordinates);\n  return lineString(orderedCoords);\n});\nexport const selectGeoJsonBounds = createSelector(selectGeoJsonWithoutOutliers, selectAreFeaturesEmpty, (geojson, isEmpty) => {\n  if (isEmpty) return null;\n  return bbox(geojson);\n});","map":{"version":3,"sources":["/Users/cliftoncampbell/Development/clif.world/modules/geojson/selectors.js"],"names":["bbox","lineString","get","createSelector","arrayToFeatureCollection","selectState","state","geojson","selectData","selectFeatureList","data","Object","values","selectLookup","reduce","acc","ft","id","selectGeoJson","features","selectGeoJsonWithoutOutliers","filter","outlier","selectAreFeaturesEmpty","list","length","selectIsInitialized","updateCount","selectChronologicalFeatures","sort","a","b","date","end","selectChronologicalFeatureIds","map","selectWorkPathGeoJson","orderedCoords","coordinates","selectGeoJsonBounds","isEmpty"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,wBAAT,QAAyC,eAAzC;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAWA,KAAK,CAACC,OAArC;AAEP,OAAO,MAAMC,UAAU,GAAGL,cAAc,CAACE,WAAD,EAAeC,KAAD,IACpDJ,GAAG,CAACI,KAAD,EAAQ,MAAR,EAAgB,EAAhB,CADmC,CAAjC;AAIP,OAAO,MAAMG,iBAAiB,GAAGN,cAAc,CAACK,UAAD,EAAcE,IAAD,IAC1DC,MAAM,CAACC,MAAP,CAAcF,IAAd,CAD6C,CAAxC;AAIP,OAAO,MAAMG,YAAY,GAAGV,cAAc,CAACK,UAAD,EAAcE,IAAD,IACrDA,IAAI,CAACI,MAAL,CAAY,CAACC,GAAD,EAAMC,EAAN,uBAAmBD,GAAnB;AAAwB,GAACC,EAAE,CAACC,EAAJ,GAASD;AAAjC,EAAZ,EAAoD,EAApD,CADwC,CAAnC;AAIP,OAAO,MAAME,aAAa,GAAGf,cAAc,CACzCM,iBADyC,EAExCU,QAAD,IAAcf,wBAAwB,CAACe,QAAD,CAFG,CAApC;AAKP,OAAO,MAAMC,4BAA4B,GAAGjB,cAAc,CACxDM,iBADwD,EAEvDU,QAAD,IACEf,wBAAwB,CACtBe,QAAQ,CAACE,MAAT,CAAgB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB,CAACA,OAAlC,CADsB,CAH8B,CAAnD;AAQP,OAAO,MAAMC,sBAAsB,GAAGpB,cAAc,CAClDM,iBADkD,EAEjDe,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgB,CAFwB,CAA7C;AAKP,OAAO,MAAMC,mBAAmB,GAAGvB,cAAc,CAC/CE,WAD+C,EAE9CC,KAAD,IAAWA,KAAK,CAACqB,WAAN,GAAoB,CAFgB,CAA1C;AAKP,OAAO,MAAMC,2BAA2B,GAAGzB,cAAc,CACvDM,iBADuD,EAEtDU,QAAD,IAAcA,QAAQ,CAACU,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,CAAOC,GAAP,GAAaF,CAAC,CAACC,IAAF,CAAOC,GAA5C,CAFyC,CAAlD;AAKP,OAAO,MAAMC,6BAA6B,GAAG/B,cAAc,CACzDyB,2BADyD,EAExDT,QAAD,IAAcA,QAAQ,CAACgB,GAAT,CAAa,CAAC;AAAElB,EAAAA;AAAF,CAAD,KAAYA,EAAzB,CAF2C,CAApD;AAKP,OAAO,MAAMmB,qBAAqB,GAAGjC,cAAc,CACjDyB,2BADiD,EAEhDT,QAAD,IAAc;AACZ,QAAMkB,aAAa,GAAGlB,QAAQ,CAACgB,GAAT,CACpB,CAAC;AAAEG,IAAAA;AAAF,GAAD,KAAqBA,WADD,CAAtB;AAGA,SAAOrC,UAAU,CAACoC,aAAD,CAAjB;AACD,CAPgD,CAA5C;AAUP,OAAO,MAAME,mBAAmB,GAAGpC,cAAc,CAC/CiB,4BAD+C,EAE/CG,sBAF+C,EAG/C,CAAChB,OAAD,EAAUiC,OAAV,KAAsB;AACpB,MAAIA,OAAJ,EAAa,OAAO,IAAP;AACb,SAAOxC,IAAI,CAACO,OAAD,CAAX;AACD,CAN8C,CAA1C","sourcesContent":["import bbox from '@turf/bbox';\nimport { lineString } from '@turf/helpers';\nimport get from 'lodash.get';\nimport { createSelector } from 'reselect';\nimport { arrayToFeatureCollection } from 'utils/geojson';\n\nexport const selectState = (state) => state.geojson;\n\nexport const selectData = createSelector(selectState, (state) =>\n  get(state, 'data', []),\n);\n\nexport const selectFeatureList = createSelector(selectData, (data) =>\n  Object.values(data),\n);\n\nexport const selectLookup = createSelector(selectData, (data) =>\n  data.reduce((acc, ft) => ({ ...acc, [ft.id]: ft }), {}),\n);\n\nexport const selectGeoJson = createSelector(\n  selectFeatureList,\n  (features) => arrayToFeatureCollection(features),\n);\n\nexport const selectGeoJsonWithoutOutliers = createSelector(\n  selectFeatureList,\n  (features) =>\n    arrayToFeatureCollection(\n      features.filter(({ outlier }) => !outlier),\n    ),\n);\n\nexport const selectAreFeaturesEmpty = createSelector(\n  selectFeatureList,\n  (list) => list.length === 0,\n);\n\nexport const selectIsInitialized = createSelector(\n  selectState,\n  (state) => state.updateCount > 0,\n);\n\nexport const selectChronologicalFeatures = createSelector(\n  selectFeatureList,\n  (features) => features.sort((a, b) => a.date.end > b.date.end),\n);\n\nexport const selectChronologicalFeatureIds = createSelector(\n  selectChronologicalFeatures,\n  (features) => features.map(({ id }) => id),\n);\n\nexport const selectWorkPathGeoJson = createSelector(\n  selectChronologicalFeatures,\n  (features) => {\n    const orderedCoords = features.map(\n      ({ coordinates }) => coordinates,\n    );\n    return lineString(orderedCoords);\n  },\n);\n\nexport const selectGeoJsonBounds = createSelector(\n  selectGeoJsonWithoutOutliers,\n  selectAreFeaturesEmpty,\n  (geojson, isEmpty) => {\n    if (isEmpty) return null;\n    return bbox(geojson);\n  },\n);\n"]},"metadata":{},"sourceType":"module"}