{"ast":null,"code":"import get from 'lodash.get';\nimport uuid from 'uuid/v4';\nimport mapboxGl from 'mapbox-gl-ssr';\nimport sizes from 'styles/theme/sizes';\nimport { WORK_SOURCE } from 'constants/source';\nimport { BOUNDS_PADDING, BOUNDS_PADDING_MOBILE } from 'constants/map';\nimport { selectIsMobile } from '../app/selectors';\nimport { selectLookup, selectGeoJsonBounds } from '../geojson/selectors';\nimport { selectHoveredFeatureId, selectMapLoaded, selectSelectedFeatureId, selectPopupId, selectNextFeatureId, selectPrevFeatureId, selectIsFeatureSelected } from './selectors';\nimport { CLEAR_SELECTION, HOVER_FEATURE, SET_MAP_LOADED, SELECT_FEATURE, UNHOVER_FEATURE, SET_POPUP_ID, RESET_MAP } from './types';\nexport const setMapLoaded = isLoaded => ({\n  type: SET_MAP_LOADED,\n  payload: isLoaded\n});\nexport const fitBounds = () => (_, getState, getMap) => {\n  const state = getState();\n  const map = getMap();\n  const bounds = selectGeoJsonBounds(state);\n  const isMobile = selectIsMobile(state);\n  const isFeatureSelected = selectIsFeatureSelected(state);\n\n  if (bounds) {\n    map.fitBounds(bounds, {\n      padding: isMobile && isFeatureSelected ? BOUNDS_PADDING_MOBILE : BOUNDS_PADDING\n    });\n  }\n};\nexport const unhoverFeature = () => (dispatch, getState, getMap) => {\n  if (!selectMapLoaded(getState())) return null;\n  const map = getMap();\n  const hoveredId = selectHoveredFeatureId(getState());\n  if (hoveredId) map.setFeatureState({\n    source: WORK_SOURCE,\n    id: hoveredId\n  }, {\n    hover: false\n  });\n  map.getCanvas().style.cursor = 'grab';\n  return dispatch({\n    type: UNHOVER_FEATURE\n  });\n};\nlet popup;\n\nconst removePopup = () => {\n  if (popup && popup.isOpen()) {\n    popup.remove();\n  }\n};\n\nexport const clearSelection = () => (dispatch, getState, getMap) => {\n  if (!selectMapLoaded(getState())) return null;\n  const map = getMap();\n  const selectedId = selectSelectedFeatureId(getState());\n  removePopup();\n  if (selectedId) map.setFeatureState({\n    source: WORK_SOURCE,\n    id: selectedId\n  }, {\n    selected: false\n  });\n  return dispatch({\n    type: CLEAR_SELECTION\n  });\n};\n\nconst getId = (map, e) => {\n  if (typeof e === 'number' || typeof e === 'string') return e;\n\n  try {\n    const features = map.queryRenderedFeatures(e.point);\n    return get(features, '[0].properties.id', null);\n  } catch (err) {\n    console.log(err);\n    return e;\n  }\n};\n\nexport const setPopupId = id => ({\n  type: SET_POPUP_ID,\n  payload: id\n});\nexport const selectFeature = e => (dispatch, getState, getMap) => {\n  const state = getState();\n  if (!selectMapLoaded(state)) return null;\n  const map = getMap();\n  const isMobile = selectIsMobile(state);\n  const prevPopupId = selectPopupId(state);\n  const prevSelectedId = selectSelectedFeatureId(state);\n  const id = getId(map, e);\n  if (!id) return null;\n  const feature = selectLookup(state)[id];\n  map.flyTo({\n    center: feature.coordinates,\n    offset: [0, isMobile ? -60 : 180],\n    zoom: 12\n  });\n\n  if (id !== prevSelectedId) {\n    if (prevSelectedId) {\n      map.setFeatureState({\n        source: WORK_SOURCE,\n        id: prevSelectedId\n      }, {\n        selected: false\n      });\n    }\n\n    map.setFeatureState({\n      source: WORK_SOURCE,\n      id\n    }, {\n      selected: true\n    });\n    dispatch({\n      type: SELECT_FEATURE,\n      payload: id\n    });\n  }\n\n  if ((id !== prevSelectedId || !prevPopupId) && !isMobile) {\n    removePopup();\n    const popupId = uuid();\n    popup = new mapboxGl.Popup({\n      closeButton: false,\n      offset: 30,\n      maxWidth: sizes.popupWidth\n    }).once('close', () => dispatch(setPopupId(null))).setLngLat(feature.coordinates).setHTML(`<div id=\"${popupId}\"></div>`).addTo(map);\n    dispatch(setPopupId(popupId));\n  }\n\n  return null;\n};\nexport const selectNextFeature = () => (dispatch, getState) => {\n  const state = getState();\n  const nextFeatureId = selectNextFeatureId(state);\n  return dispatch(selectFeature(nextFeatureId));\n};\nexport const selectPrevFeature = () => (dispatch, getState) => {\n  const state = getState();\n  const prevFeatureId = selectPrevFeatureId(state);\n  return dispatch(selectFeature(prevFeatureId));\n};\nexport const hoverFeature = e => (dispatch, getState, getMap) => {\n  const state = getState();\n  if (!selectMapLoaded(state)) return null;\n  const map = getMap();\n  const hoveredId = selectHoveredFeatureId(state);\n  const id = getId(map, e);\n  if (!id) return null;\n  map.getCanvas().style.cursor = 'pointer';\n  if (hoveredId !== id) dispatch(unhoverFeature());\n  if (hoveredId === id) return null;\n  map.setFeatureState({\n    source: WORK_SOURCE,\n    id\n  }, {\n    hover: true\n  });\n  return dispatch({\n    type: HOVER_FEATURE,\n    payload: id\n  });\n};\nexport const resetMap = () => ({\n  type: RESET_MAP\n});","map":{"version":3,"sources":["/Users/cliftoncampbell/Development/clif.world/modules/map/actions.js"],"names":["get","uuid","mapboxGl","sizes","WORK_SOURCE","BOUNDS_PADDING","BOUNDS_PADDING_MOBILE","selectIsMobile","selectLookup","selectGeoJsonBounds","selectHoveredFeatureId","selectMapLoaded","selectSelectedFeatureId","selectPopupId","selectNextFeatureId","selectPrevFeatureId","selectIsFeatureSelected","CLEAR_SELECTION","HOVER_FEATURE","SET_MAP_LOADED","SELECT_FEATURE","UNHOVER_FEATURE","SET_POPUP_ID","RESET_MAP","setMapLoaded","isLoaded","type","payload","fitBounds","_","getState","getMap","state","map","bounds","isMobile","isFeatureSelected","padding","unhoverFeature","dispatch","hoveredId","setFeatureState","source","id","hover","getCanvas","style","cursor","popup","removePopup","isOpen","remove","clearSelection","selectedId","selected","getId","e","features","queryRenderedFeatures","point","err","console","log","setPopupId","selectFeature","prevPopupId","prevSelectedId","feature","flyTo","center","coordinates","offset","zoom","popupId","Popup","closeButton","maxWidth","popupWidth","once","setLngLat","setHTML","addTo","selectNextFeature","nextFeatureId","selectPrevFeature","prevFeatureId","hoverFeature","resetMap"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport uuid from 'uuid/v4';\nimport mapboxGl from 'mapbox-gl-ssr';\nimport sizes from 'styles/theme/sizes';\nimport { WORK_SOURCE } from 'constants/source';\nimport { BOUNDS_PADDING, BOUNDS_PADDING_MOBILE } from 'constants/map';\nimport { selectIsMobile } from '../app/selectors';\nimport {\n  selectLookup,\n  selectGeoJsonBounds,\n} from '../geojson/selectors';\nimport {\n  selectHoveredFeatureId,\n  selectMapLoaded,\n  selectSelectedFeatureId,\n  selectPopupId,\n  selectNextFeatureId,\n  selectPrevFeatureId,\n  selectIsFeatureSelected,\n} from './selectors';\nimport {\n  CLEAR_SELECTION,\n  HOVER_FEATURE,\n  SET_MAP_LOADED,\n  SELECT_FEATURE,\n  UNHOVER_FEATURE,\n  SET_POPUP_ID,\n  RESET_MAP,\n} from './types';\n\nexport const setMapLoaded = (isLoaded) => ({\n  type: SET_MAP_LOADED,\n  payload: isLoaded,\n});\n\nexport const fitBounds = () => (_, getState, getMap) => {\n  const state = getState();\n  const map = getMap();\n  const bounds = selectGeoJsonBounds(state);\n  const isMobile = selectIsMobile(state);\n  const isFeatureSelected = selectIsFeatureSelected(state);\n\n  if (bounds) {\n    map.fitBounds(bounds, {\n      padding:\n        isMobile && isFeatureSelected\n          ? BOUNDS_PADDING_MOBILE\n          : BOUNDS_PADDING,\n    });\n  }\n};\n\nexport const unhoverFeature = () => (dispatch, getState, getMap) => {\n  if (!selectMapLoaded(getState())) return null;\n  const map = getMap();\n  const hoveredId = selectHoveredFeatureId(getState());\n\n  if (hoveredId)\n    map.setFeatureState(\n      { source: WORK_SOURCE, id: hoveredId },\n      { hover: false },\n    );\n\n  map.getCanvas().style.cursor = 'grab';\n  return dispatch({\n    type: UNHOVER_FEATURE,\n  });\n};\n\nlet popup;\nconst removePopup = () => {\n  if (popup && popup.isOpen()) {\n    popup.remove();\n  }\n};\n\nexport const clearSelection = () => (dispatch, getState, getMap) => {\n  if (!selectMapLoaded(getState())) return null;\n  const map = getMap();\n  const selectedId = selectSelectedFeatureId(getState());\n\n  removePopup();\n\n  if (selectedId)\n    map.setFeatureState(\n      { source: WORK_SOURCE, id: selectedId },\n      { selected: false },\n    );\n\n  return dispatch({\n    type: CLEAR_SELECTION,\n  });\n};\n\nconst getId = (map, e) => {\n  if (typeof e === 'number' || typeof e === 'string') return e;\n  try {\n    const features = map.queryRenderedFeatures(e.point);\n    return get(features, '[0].properties.id', null);\n  } catch (err) {\n    console.log(err);\n    return e;\n  }\n};\n\nexport const setPopupId = (id) => ({\n  type: SET_POPUP_ID,\n  payload: id,\n});\n\nexport const selectFeature = (e) => (dispatch, getState, getMap) => {\n  const state = getState();\n  if (!selectMapLoaded(state)) return null;\n  const map = getMap();\n\n  const isMobile = selectIsMobile(state);\n  const prevPopupId = selectPopupId(state);\n  const prevSelectedId = selectSelectedFeatureId(state);\n\n  const id = getId(map, e);\n  if (!id) return null;\n  const feature = selectLookup(state)[id];\n\n  map.flyTo({\n    center: feature.coordinates,\n    offset: [0, isMobile ? -60 : 180],\n    zoom: 12,\n  });\n\n  if (id !== prevSelectedId) {\n    if (prevSelectedId) {\n      map.setFeatureState(\n        { source: WORK_SOURCE, id: prevSelectedId },\n        { selected: false },\n      );\n    }\n    map.setFeatureState(\n      { source: WORK_SOURCE, id },\n      { selected: true },\n    );\n    dispatch({\n      type: SELECT_FEATURE,\n      payload: id,\n    });\n  }\n\n  if ((id !== prevSelectedId || !prevPopupId) && !isMobile) {\n    removePopup();\n    const popupId = uuid();\n    popup = new mapboxGl.Popup({\n      closeButton: false,\n      offset: 30,\n      maxWidth: sizes.popupWidth,\n    })\n      .once('close', () => dispatch(setPopupId(null)))\n      .setLngLat(feature.coordinates)\n      .setHTML(`<div id=\"${popupId}\"></div>`)\n      .addTo(map);\n    dispatch(setPopupId(popupId));\n  }\n  return null;\n};\n\nexport const selectNextFeature = () => (dispatch, getState) => {\n  const state = getState();\n  const nextFeatureId = selectNextFeatureId(state);\n  return dispatch(selectFeature(nextFeatureId));\n};\n\nexport const selectPrevFeature = () => (dispatch, getState) => {\n  const state = getState();\n  const prevFeatureId = selectPrevFeatureId(state);\n  return dispatch(selectFeature(prevFeatureId));\n};\n\nexport const hoverFeature = (e) => (dispatch, getState, getMap) => {\n  const state = getState();\n  if (!selectMapLoaded(state)) return null;\n  const map = getMap();\n  const hoveredId = selectHoveredFeatureId(state);\n\n  const id = getId(map, e);\n\n  if (!id) return null;\n\n  map.getCanvas().style.cursor = 'pointer';\n\n  if (hoveredId !== id) dispatch(unhoverFeature());\n  if (hoveredId === id) return null;\n\n  map.setFeatureState({ source: WORK_SOURCE, id }, { hover: true });\n\n  return dispatch({\n    type: HOVER_FEATURE,\n    payload: id,\n  });\n};\n\nexport const resetMap = () => ({\n  type: RESET_MAP,\n});\n"]},"metadata":{},"sourceType":"module"}