{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSelector } from 'reselect';\nimport get from 'lodash.get';\nimport { WORK_SOURCE, WORK_LABEL_SOURCE, WORK_PATH_SOURCE } from 'constants/source';\nimport colors from 'styles/theme/colors';\nimport { selectGeoJson, selectLookup, selectGeoJsonBounds, selectWorkPathGeoJson, selectChronologicalFeatureIds } from '../geojson/selectors';\nexport var selectMapState = function selectMapState(state) {\n  return state.map;\n};\nexport var selectMapLoaded = createSelector(selectMapState, function (map) {\n  return get(map, 'mapLoaded', false);\n});\nexport var selectMapConfig = createSelector(selectMapState, selectGeoJsonBounds, function (_ref, bounds) {\n  var config = _ref.config;\n  return _objectSpread({}, config, {\n    bounds: bounds\n  });\n});\n\nvar makeHoverCase = function makeHoverCase(hoverValue, defaultValue) {\n  return ['case', ['boolean', ['feature-state', 'hover'], false], hoverValue, defaultValue];\n};\n\nvar makeSelectedCase = function makeSelectedCase(selectedValue, defaultValue) {\n  return ['case', ['boolean', ['feature-state', 'selected'], false], selectedValue, defaultValue];\n};\n\nexport var selectMapLayers = createSelector(selectGeoJson, selectWorkPathGeoJson, function (data, lineData) {\n  return [{\n    id: WORK_PATH_SOURCE,\n    type: 'line',\n    source: {\n      type: 'geojson',\n      data: lineData\n    },\n    paint: {\n      'line-color': colors.text2,\n      'line-opacity': 0.5,\n      'line-width': 1\n    }\n  }, {\n    id: WORK_SOURCE,\n    type: 'circle',\n    source: {\n      type: 'geojson',\n      data: data\n    },\n    paint: {\n      'circle-color': colors.ctaBackground1,\n      'circle-radius': makeSelectedCase(8, 6),\n      'circle-stroke-width': makeSelectedCase(10, makeHoverCase(8, 5)),\n      'circle-stroke-color': colors.ctaBackground1,\n      'circle-stroke-opacity': makeHoverCase(0.3, 0.2)\n    }\n  }, {\n    id: WORK_LABEL_SOURCE,\n    type: 'symbol',\n    source: {\n      type: 'geojson',\n      data: data\n    },\n    paint: {\n      'text-color': colors.text2\n    },\n    layout: {\n      'text-field': '{company}',\n      'text-font': ['Andale Mono Regular'],\n      'text-anchor': 'left',\n      'text-offset': [1.5, 0.3],\n      'text-transform': 'uppercase'\n    }\n  }];\n});\nexport var selectHoveredFeatureId = createSelector(selectMapState, function (map) {\n  return get(map, 'hoveredFeatureId');\n});\nexport var selectSelectedFeatureId = createSelector(selectMapState, function (map) {\n  return get(map, 'selectedFeatureId');\n});\nexport var selectIsFeatureSelected = createSelector(selectSelectedFeatureId, function (id) {\n  return !!id;\n});\nexport var selectSelectedFeature = createSelector(selectSelectedFeatureId, selectLookup, function (id, lookup) {\n  return get(lookup, id, {});\n});\nexport var selectIsFirstFeatureSelected = createSelector(selectSelectedFeatureId, selectChronologicalFeatureIds, function (id, ids) {\n  return ids.indexOf(id) === 0;\n});\nexport var selectIsLastFeatureSelected = createSelector(selectSelectedFeatureId, selectChronologicalFeatureIds, function (id, ids) {\n  return ids.indexOf(id) === ids.length - 1;\n});\nexport var selectPrevFeatureId = createSelector(selectSelectedFeatureId, selectChronologicalFeatureIds, selectIsFirstFeatureSelected, function (id, ids, bail) {\n  if (bail) return id;\n  return ids[ids.indexOf(id) - 1];\n});\nexport var selectNextFeatureId = createSelector(selectSelectedFeatureId, selectChronologicalFeatureIds, selectIsLastFeatureSelected, function (id, ids, bail) {\n  if (bail) return id;\n  return ids[ids.indexOf(id) + 1];\n});\nexport var selectPopupId = createSelector(selectMapState, function (map) {\n  return map.popupId;\n});","map":{"version":3,"sources":["/Users/cliftoncampbell/Development/clif.world/modules/map/selectors.js"],"names":["createSelector","get","WORK_SOURCE","WORK_LABEL_SOURCE","WORK_PATH_SOURCE","colors","selectGeoJson","selectLookup","selectGeoJsonBounds","selectWorkPathGeoJson","selectChronologicalFeatureIds","selectMapState","state","map","selectMapLoaded","selectMapConfig","bounds","config","makeHoverCase","hoverValue","defaultValue","makeSelectedCase","selectedValue","selectMapLayers","data","lineData","id","type","source","paint","text2","ctaBackground1","layout","selectHoveredFeatureId","selectSelectedFeatureId","selectIsFeatureSelected","selectSelectedFeature","lookup","selectIsFirstFeatureSelected","ids","indexOf","selectIsLastFeatureSelected","length","selectPrevFeatureId","bail","selectNextFeatureId","selectPopupId","popupId"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SACEC,WADF,EAEEC,iBAFF,EAGEC,gBAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,mBAHF,EAIEC,qBAJF,EAKEC,6BALF,QAMO,sBANP;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,GAAjB;AAAA,CAAvB;AAEP,OAAO,IAAMC,eAAe,GAAGd,cAAc,CAACW,cAAD,EAAiB,UAACE,GAAD;AAAA,SAC5DZ,GAAG,CAACY,GAAD,EAAM,WAAN,EAAmB,KAAnB,CADyD;AAAA,CAAjB,CAAtC;AAIP,OAAO,IAAME,eAAe,GAAGf,cAAc,CAC3CW,cAD2C,EAE3CH,mBAF2C,EAG3C,gBAAaQ,MAAb;AAAA,MAAGC,MAAH,QAAGA,MAAH;AAAA,2BACKA,MADL;AAEED,IAAAA,MAAM,EAANA;AAFF;AAAA,CAH2C,CAAtC;;AASP,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAaC,YAAb;AAAA,SAA8B,CAClD,MADkD,EAElD,CAAC,SAAD,EAAY,CAAC,eAAD,EAAkB,OAAlB,CAAZ,EAAwC,KAAxC,CAFkD,EAGlDD,UAHkD,EAIlDC,YAJkD,CAA9B;AAAA,CAAtB;;AAOA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,aAAD,EAAgBF,YAAhB;AAAA,SAAiC,CACxD,MADwD,EAExD,CAAC,SAAD,EAAY,CAAC,eAAD,EAAkB,UAAlB,CAAZ,EAA2C,KAA3C,CAFwD,EAGxDE,aAHwD,EAIxDF,YAJwD,CAAjC;AAAA,CAAzB;;AAOA,OAAO,IAAMG,eAAe,GAAGvB,cAAc,CAC3CM,aAD2C,EAE3CG,qBAF2C,EAG3C,UAACe,IAAD,EAAOC,QAAP;AAAA,SAAoB,CAClB;AACEC,IAAAA,EAAE,EAAEtB,gBADN;AAEEuB,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,MAAM,EAAE;AACND,MAAAA,IAAI,EAAE,SADA;AAENH,MAAAA,IAAI,EAAEC;AAFA,KAHV;AAOEI,IAAAA,KAAK,EAAE;AACL,oBAAcxB,MAAM,CAACyB,KADhB;AAEL,sBAAgB,GAFX;AAGL,oBAAc;AAHT;AAPT,GADkB,EAclB;AACEJ,IAAAA,EAAE,EAAExB,WADN;AAEEyB,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,MAAM,EAAE;AACND,MAAAA,IAAI,EAAE,SADA;AAENH,MAAAA,IAAI,EAAJA;AAFM,KAHV;AAOEK,IAAAA,KAAK,EAAE;AACL,sBAAgBxB,MAAM,CAAC0B,cADlB;AAEL,uBAAiBV,gBAAgB,CAAC,CAAD,EAAI,CAAJ,CAF5B;AAGL,6BAAuBA,gBAAgB,CACrC,EADqC,EAErCH,aAAa,CAAC,CAAD,EAAI,CAAJ,CAFwB,CAHlC;AAOL,6BAAuBb,MAAM,CAAC0B,cAPzB;AAQL,+BAAyBb,aAAa,CAAC,GAAD,EAAM,GAAN;AARjC;AAPT,GAdkB,EAgClB;AACEQ,IAAAA,EAAE,EAAEvB,iBADN;AAEEwB,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,MAAM,EAAE;AACND,MAAAA,IAAI,EAAE,SADA;AAENH,MAAAA,IAAI,EAAJA;AAFM,KAHV;AAOEK,IAAAA,KAAK,EAAE;AACL,oBAAcxB,MAAM,CAACyB;AADhB,KAPT;AAUEE,IAAAA,MAAM,EAAE;AACN,oBAAc,WADR;AAEN,mBAAa,CAAC,qBAAD,CAFP;AAGN,qBAAe,MAHT;AAIN,qBAAe,CAAC,GAAD,EAAM,GAAN,CAJT;AAKN,wBAAkB;AALZ;AAVV,GAhCkB,CAApB;AAAA,CAH2C,CAAtC;AAwDP,OAAO,IAAMC,sBAAsB,GAAGjC,cAAc,CAClDW,cADkD,EAElD,UAACE,GAAD;AAAA,SAASZ,GAAG,CAACY,GAAD,EAAM,kBAAN,CAAZ;AAAA,CAFkD,CAA7C;AAKP,OAAO,IAAMqB,uBAAuB,GAAGlC,cAAc,CACnDW,cADmD,EAEnD,UAACE,GAAD;AAAA,SAASZ,GAAG,CAACY,GAAD,EAAM,mBAAN,CAAZ;AAAA,CAFmD,CAA9C;AAKP,OAAO,IAAMsB,uBAAuB,GAAGnC,cAAc,CACnDkC,uBADmD,EAEnD,UAACR,EAAD;AAAA,SAAQ,CAAC,CAACA,EAAV;AAAA,CAFmD,CAA9C;AAKP,OAAO,IAAMU,qBAAqB,GAAGpC,cAAc,CACjDkC,uBADiD,EAEjD3B,YAFiD,EAGjD,UAACmB,EAAD,EAAKW,MAAL;AAAA,SAAgBpC,GAAG,CAACoC,MAAD,EAASX,EAAT,EAAa,EAAb,CAAnB;AAAA,CAHiD,CAA5C;AAMP,OAAO,IAAMY,4BAA4B,GAAGtC,cAAc,CACxDkC,uBADwD,EAExDxB,6BAFwD,EAGxD,UAACgB,EAAD,EAAKa,GAAL;AAAA,SAAaA,GAAG,CAACC,OAAJ,CAAYd,EAAZ,MAAoB,CAAjC;AAAA,CAHwD,CAAnD;AAMP,OAAO,IAAMe,2BAA2B,GAAGzC,cAAc,CACvDkC,uBADuD,EAEvDxB,6BAFuD,EAGvD,UAACgB,EAAD,EAAKa,GAAL;AAAA,SAAaA,GAAG,CAACC,OAAJ,CAAYd,EAAZ,MAAoBa,GAAG,CAACG,MAAJ,GAAa,CAA9C;AAAA,CAHuD,CAAlD;AAMP,OAAO,IAAMC,mBAAmB,GAAG3C,cAAc,CAC/CkC,uBAD+C,EAE/CxB,6BAF+C,EAG/C4B,4BAH+C,EAI/C,UAACZ,EAAD,EAAKa,GAAL,EAAUK,IAAV,EAAmB;AACjB,MAAIA,IAAJ,EAAU,OAAOlB,EAAP;AACV,SAAOa,GAAG,CAACA,GAAG,CAACC,OAAJ,CAAYd,EAAZ,IAAkB,CAAnB,CAAV;AACD,CAP8C,CAA1C;AAUP,OAAO,IAAMmB,mBAAmB,GAAG7C,cAAc,CAC/CkC,uBAD+C,EAE/CxB,6BAF+C,EAG/C+B,2BAH+C,EAI/C,UAACf,EAAD,EAAKa,GAAL,EAAUK,IAAV,EAAmB;AACjB,MAAIA,IAAJ,EAAU,OAAOlB,EAAP;AACV,SAAOa,GAAG,CAACA,GAAG,CAACC,OAAJ,CAAYd,EAAZ,IAAkB,CAAnB,CAAV;AACD,CAP8C,CAA1C;AAUP,OAAO,IAAMoB,aAAa,GAAG9C,cAAc,CACzCW,cADyC,EAEzC,UAACE,GAAD;AAAA,SAASA,GAAG,CAACkC,OAAb;AAAA,CAFyC,CAApC","sourcesContent":["import { createSelector } from 'reselect';\nimport get from 'lodash.get';\nimport {\n  WORK_SOURCE,\n  WORK_LABEL_SOURCE,\n  WORK_PATH_SOURCE,\n} from 'constants/source';\nimport colors from 'styles/theme/colors';\nimport {\n  selectGeoJson,\n  selectLookup,\n  selectGeoJsonBounds,\n  selectWorkPathGeoJson,\n  selectChronologicalFeatureIds,\n} from '../geojson/selectors';\n\nexport const selectMapState = (state) => state.map;\n\nexport const selectMapLoaded = createSelector(selectMapState, (map) =>\n  get(map, 'mapLoaded', false),\n);\n\nexport const selectMapConfig = createSelector(\n  selectMapState,\n  selectGeoJsonBounds,\n  ({ config }, bounds) => ({\n    ...config,\n    bounds,\n  }),\n);\n\nconst makeHoverCase = (hoverValue, defaultValue) => [\n  'case',\n  ['boolean', ['feature-state', 'hover'], false],\n  hoverValue,\n  defaultValue,\n];\n\nconst makeSelectedCase = (selectedValue, defaultValue) => [\n  'case',\n  ['boolean', ['feature-state', 'selected'], false],\n  selectedValue,\n  defaultValue,\n];\n\nexport const selectMapLayers = createSelector(\n  selectGeoJson,\n  selectWorkPathGeoJson,\n  (data, lineData) => [\n    {\n      id: WORK_PATH_SOURCE,\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: lineData,\n      },\n      paint: {\n        'line-color': colors.text2,\n        'line-opacity': 0.5,\n        'line-width': 1,\n      },\n    },\n    {\n      id: WORK_SOURCE,\n      type: 'circle',\n      source: {\n        type: 'geojson',\n        data,\n      },\n      paint: {\n        'circle-color': colors.ctaBackground1,\n        'circle-radius': makeSelectedCase(8, 6),\n        'circle-stroke-width': makeSelectedCase(\n          10,\n          makeHoverCase(8, 5),\n        ),\n        'circle-stroke-color': colors.ctaBackground1,\n        'circle-stroke-opacity': makeHoverCase(0.3, 0.2),\n      },\n    },\n    {\n      id: WORK_LABEL_SOURCE,\n      type: 'symbol',\n      source: {\n        type: 'geojson',\n        data,\n      },\n      paint: {\n        'text-color': colors.text2,\n      },\n      layout: {\n        'text-field': '{company}',\n        'text-font': ['Andale Mono Regular'],\n        'text-anchor': 'left',\n        'text-offset': [1.5, 0.3],\n        'text-transform': 'uppercase',\n      },\n    },\n  ],\n);\n\nexport const selectHoveredFeatureId = createSelector(\n  selectMapState,\n  (map) => get(map, 'hoveredFeatureId'),\n);\n\nexport const selectSelectedFeatureId = createSelector(\n  selectMapState,\n  (map) => get(map, 'selectedFeatureId'),\n);\n\nexport const selectIsFeatureSelected = createSelector(\n  selectSelectedFeatureId,\n  (id) => !!id,\n);\n\nexport const selectSelectedFeature = createSelector(\n  selectSelectedFeatureId,\n  selectLookup,\n  (id, lookup) => get(lookup, id, {}),\n);\n\nexport const selectIsFirstFeatureSelected = createSelector(\n  selectSelectedFeatureId,\n  selectChronologicalFeatureIds,\n  (id, ids) => ids.indexOf(id) === 0,\n);\n\nexport const selectIsLastFeatureSelected = createSelector(\n  selectSelectedFeatureId,\n  selectChronologicalFeatureIds,\n  (id, ids) => ids.indexOf(id) === ids.length - 1,\n);\n\nexport const selectPrevFeatureId = createSelector(\n  selectSelectedFeatureId,\n  selectChronologicalFeatureIds,\n  selectIsFirstFeatureSelected,\n  (id, ids, bail) => {\n    if (bail) return id;\n    return ids[ids.indexOf(id) - 1];\n  },\n);\n\nexport const selectNextFeatureId = createSelector(\n  selectSelectedFeatureId,\n  selectChronologicalFeatureIds,\n  selectIsLastFeatureSelected,\n  (id, ids, bail) => {\n    if (bail) return id;\n    return ids[ids.indexOf(id) + 1];\n  },\n);\n\nexport const selectPopupId = createSelector(\n  selectMapState,\n  (map) => map.popupId,\n);\n"]},"metadata":{},"sourceType":"module"}